// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2024 23:32:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_sample_tst(
	a,
	b,
	c,
	sampler_tx
);
input [4:0] a;
input [4:0] b;
input [3:0] c;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULA_vlg_check_tst (
	ledNegativo,
	ledOverflow,
	ledZero,
	saida7SEG,
	saidaLEDS,
	sampler_rx
);
input  ledNegativo;
input  ledOverflow;
input  ledZero;
input [20:0] saida7SEG;
input [4:0] saidaLEDS;
input sampler_rx;

reg  ledNegativo_expected;
reg  ledOverflow_expected;
reg  ledZero_expected;
reg [20:0] saida7SEG_expected;
reg [4:0] saidaLEDS_expected;

reg  ledNegativo_prev;
reg  ledOverflow_prev;
reg  ledZero_prev;
reg [20:0] saida7SEG_prev;
reg [4:0] saidaLEDS_prev;

reg  ledNegativo_expected_prev;
reg  ledOverflow_expected_prev;
reg  ledZero_expected_prev;
reg [20:0] saida7SEG_expected_prev;
reg [4:0] saidaLEDS_expected_prev;

reg  last_ledNegativo_exp;
reg  last_ledOverflow_exp;
reg  last_ledZero_exp;
reg [20:0] last_saida7SEG_exp;
reg [4:0] last_saidaLEDS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	ledNegativo_prev = ledNegativo;
	ledOverflow_prev = ledOverflow;
	ledZero_prev = ledZero;
	saida7SEG_prev = saida7SEG;
	saidaLEDS_prev = saidaLEDS;
end

// update expected /o prevs

always @(trigger)
begin
	ledNegativo_expected_prev = ledNegativo_expected;
	ledOverflow_expected_prev = ledOverflow_expected;
	ledZero_expected_prev = ledZero_expected;
	saida7SEG_expected_prev = saida7SEG_expected;
	saidaLEDS_expected_prev = saidaLEDS_expected;
end



// expected ledOverflow
initial
begin
	ledOverflow_expected = 1'bX;
end 

// expected ledNegativo
initial
begin
	ledNegativo_expected = 1'bX;
end 

// expected ledZero
initial
begin
	ledZero_expected = 1'bX;
end 
// expected saidaLEDS[ 4 ]
initial
begin
	saidaLEDS_expected[4] = 1'bX;
end 
// expected saidaLEDS[ 3 ]
initial
begin
	saidaLEDS_expected[3] = 1'bX;
end 
// expected saidaLEDS[ 2 ]
initial
begin
	saidaLEDS_expected[2] = 1'bX;
end 
// expected saidaLEDS[ 1 ]
initial
begin
	saidaLEDS_expected[1] = 1'bX;
end 
// expected saidaLEDS[ 0 ]
initial
begin
	saidaLEDS_expected[0] = 1'bX;
end 
// expected saida7SEG[ 20 ]
initial
begin
	saida7SEG_expected[20] = 1'bX;
end 
// expected saida7SEG[ 19 ]
initial
begin
	saida7SEG_expected[19] = 1'bX;
end 
// expected saida7SEG[ 18 ]
initial
begin
	saida7SEG_expected[18] = 1'bX;
end 
// expected saida7SEG[ 17 ]
initial
begin
	saida7SEG_expected[17] = 1'bX;
end 
// expected saida7SEG[ 16 ]
initial
begin
	saida7SEG_expected[16] = 1'bX;
end 
// expected saida7SEG[ 15 ]
initial
begin
	saida7SEG_expected[15] = 1'bX;
end 
// expected saida7SEG[ 14 ]
initial
begin
	saida7SEG_expected[14] = 1'bX;
end 
// expected saida7SEG[ 13 ]
initial
begin
	saida7SEG_expected[13] = 1'bX;
end 
// expected saida7SEG[ 12 ]
initial
begin
	saida7SEG_expected[12] = 1'bX;
end 
// expected saida7SEG[ 11 ]
initial
begin
	saida7SEG_expected[11] = 1'bX;
end 
// expected saida7SEG[ 10 ]
initial
begin
	saida7SEG_expected[10] = 1'bX;
end 
// expected saida7SEG[ 9 ]
initial
begin
	saida7SEG_expected[9] = 1'bX;
end 
// expected saida7SEG[ 8 ]
initial
begin
	saida7SEG_expected[8] = 1'bX;
end 
// expected saida7SEG[ 7 ]
initial
begin
	saida7SEG_expected[7] = 1'bX;
end 
// expected saida7SEG[ 6 ]
initial
begin
	saida7SEG_expected[6] = 1'bX;
end 
// expected saida7SEG[ 5 ]
initial
begin
	saida7SEG_expected[5] = 1'bX;
end 
// expected saida7SEG[ 4 ]
initial
begin
	saida7SEG_expected[4] = 1'bX;
end 
// expected saida7SEG[ 3 ]
initial
begin
	saida7SEG_expected[3] = 1'bX;
end 
// expected saida7SEG[ 2 ]
initial
begin
	saida7SEG_expected[2] = 1'bX;
end 
// expected saida7SEG[ 1 ]
initial
begin
	saida7SEG_expected[1] = 1'bX;
end 
// expected saida7SEG[ 0 ]
initial
begin
	saida7SEG_expected[0] = 1'bX;
end 
// generate trigger
always @(ledNegativo_expected or ledNegativo or ledOverflow_expected or ledOverflow or ledZero_expected or ledZero or saida7SEG_expected or saida7SEG or saidaLEDS_expected or saidaLEDS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ledNegativo = %b | expected ledOverflow = %b | expected ledZero = %b | expected saida7SEG = %b | expected saidaLEDS = %b | ",ledNegativo_expected_prev,ledOverflow_expected_prev,ledZero_expected_prev,saida7SEG_expected_prev,saidaLEDS_expected_prev);
	$display("| real ledNegativo = %b | real ledOverflow = %b | real ledZero = %b | real saida7SEG = %b | real saidaLEDS = %b | ",ledNegativo_prev,ledOverflow_prev,ledZero_prev,saida7SEG_prev,saidaLEDS_prev);
`endif
	if (
		( ledNegativo_expected_prev !== 1'bx ) && ( ledNegativo_prev !== ledNegativo_expected_prev )
		&& ((ledNegativo_expected_prev !== last_ledNegativo_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledNegativo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledNegativo_expected_prev);
		$display ("     Real value = %b", ledNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledNegativo_exp = ledNegativo_expected_prev;
	end
	if (
		( ledOverflow_expected_prev !== 1'bx ) && ( ledOverflow_prev !== ledOverflow_expected_prev )
		&& ((ledOverflow_expected_prev !== last_ledOverflow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledOverflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledOverflow_expected_prev);
		$display ("     Real value = %b", ledOverflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledOverflow_exp = ledOverflow_expected_prev;
	end
	if (
		( ledZero_expected_prev !== 1'bx ) && ( ledZero_prev !== ledZero_expected_prev )
		&& ((ledZero_expected_prev !== last_ledZero_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledZero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledZero_expected_prev);
		$display ("     Real value = %b", ledZero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledZero_exp = ledZero_expected_prev;
	end
	if (
		( saida7SEG_expected_prev[0] !== 1'bx ) && ( saida7SEG_prev[0] !== saida7SEG_expected_prev[0] )
		&& ((saida7SEG_expected_prev[0] !== last_saida7SEG_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[0] = saida7SEG_expected_prev[0];
	end
	if (
		( saida7SEG_expected_prev[1] !== 1'bx ) && ( saida7SEG_prev[1] !== saida7SEG_expected_prev[1] )
		&& ((saida7SEG_expected_prev[1] !== last_saida7SEG_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[1] = saida7SEG_expected_prev[1];
	end
	if (
		( saida7SEG_expected_prev[2] !== 1'bx ) && ( saida7SEG_prev[2] !== saida7SEG_expected_prev[2] )
		&& ((saida7SEG_expected_prev[2] !== last_saida7SEG_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[2] = saida7SEG_expected_prev[2];
	end
	if (
		( saida7SEG_expected_prev[3] !== 1'bx ) && ( saida7SEG_prev[3] !== saida7SEG_expected_prev[3] )
		&& ((saida7SEG_expected_prev[3] !== last_saida7SEG_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[3] = saida7SEG_expected_prev[3];
	end
	if (
		( saida7SEG_expected_prev[4] !== 1'bx ) && ( saida7SEG_prev[4] !== saida7SEG_expected_prev[4] )
		&& ((saida7SEG_expected_prev[4] !== last_saida7SEG_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[4] = saida7SEG_expected_prev[4];
	end
	if (
		( saida7SEG_expected_prev[5] !== 1'bx ) && ( saida7SEG_prev[5] !== saida7SEG_expected_prev[5] )
		&& ((saida7SEG_expected_prev[5] !== last_saida7SEG_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[5] = saida7SEG_expected_prev[5];
	end
	if (
		( saida7SEG_expected_prev[6] !== 1'bx ) && ( saida7SEG_prev[6] !== saida7SEG_expected_prev[6] )
		&& ((saida7SEG_expected_prev[6] !== last_saida7SEG_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[6] = saida7SEG_expected_prev[6];
	end
	if (
		( saida7SEG_expected_prev[7] !== 1'bx ) && ( saida7SEG_prev[7] !== saida7SEG_expected_prev[7] )
		&& ((saida7SEG_expected_prev[7] !== last_saida7SEG_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[7] = saida7SEG_expected_prev[7];
	end
	if (
		( saida7SEG_expected_prev[8] !== 1'bx ) && ( saida7SEG_prev[8] !== saida7SEG_expected_prev[8] )
		&& ((saida7SEG_expected_prev[8] !== last_saida7SEG_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[8] = saida7SEG_expected_prev[8];
	end
	if (
		( saida7SEG_expected_prev[9] !== 1'bx ) && ( saida7SEG_prev[9] !== saida7SEG_expected_prev[9] )
		&& ((saida7SEG_expected_prev[9] !== last_saida7SEG_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[9] = saida7SEG_expected_prev[9];
	end
	if (
		( saida7SEG_expected_prev[10] !== 1'bx ) && ( saida7SEG_prev[10] !== saida7SEG_expected_prev[10] )
		&& ((saida7SEG_expected_prev[10] !== last_saida7SEG_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[10] = saida7SEG_expected_prev[10];
	end
	if (
		( saida7SEG_expected_prev[11] !== 1'bx ) && ( saida7SEG_prev[11] !== saida7SEG_expected_prev[11] )
		&& ((saida7SEG_expected_prev[11] !== last_saida7SEG_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[11] = saida7SEG_expected_prev[11];
	end
	if (
		( saida7SEG_expected_prev[12] !== 1'bx ) && ( saida7SEG_prev[12] !== saida7SEG_expected_prev[12] )
		&& ((saida7SEG_expected_prev[12] !== last_saida7SEG_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[12] = saida7SEG_expected_prev[12];
	end
	if (
		( saida7SEG_expected_prev[13] !== 1'bx ) && ( saida7SEG_prev[13] !== saida7SEG_expected_prev[13] )
		&& ((saida7SEG_expected_prev[13] !== last_saida7SEG_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[13] = saida7SEG_expected_prev[13];
	end
	if (
		( saida7SEG_expected_prev[14] !== 1'bx ) && ( saida7SEG_prev[14] !== saida7SEG_expected_prev[14] )
		&& ((saida7SEG_expected_prev[14] !== last_saida7SEG_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[14] = saida7SEG_expected_prev[14];
	end
	if (
		( saida7SEG_expected_prev[15] !== 1'bx ) && ( saida7SEG_prev[15] !== saida7SEG_expected_prev[15] )
		&& ((saida7SEG_expected_prev[15] !== last_saida7SEG_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[15] = saida7SEG_expected_prev[15];
	end
	if (
		( saida7SEG_expected_prev[16] !== 1'bx ) && ( saida7SEG_prev[16] !== saida7SEG_expected_prev[16] )
		&& ((saida7SEG_expected_prev[16] !== last_saida7SEG_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[16] = saida7SEG_expected_prev[16];
	end
	if (
		( saida7SEG_expected_prev[17] !== 1'bx ) && ( saida7SEG_prev[17] !== saida7SEG_expected_prev[17] )
		&& ((saida7SEG_expected_prev[17] !== last_saida7SEG_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[17] = saida7SEG_expected_prev[17];
	end
	if (
		( saida7SEG_expected_prev[18] !== 1'bx ) && ( saida7SEG_prev[18] !== saida7SEG_expected_prev[18] )
		&& ((saida7SEG_expected_prev[18] !== last_saida7SEG_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[18] = saida7SEG_expected_prev[18];
	end
	if (
		( saida7SEG_expected_prev[19] !== 1'bx ) && ( saida7SEG_prev[19] !== saida7SEG_expected_prev[19] )
		&& ((saida7SEG_expected_prev[19] !== last_saida7SEG_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[19] = saida7SEG_expected_prev[19];
	end
	if (
		( saida7SEG_expected_prev[20] !== 1'bx ) && ( saida7SEG_prev[20] !== saida7SEG_expected_prev[20] )
		&& ((saida7SEG_expected_prev[20] !== last_saida7SEG_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida7SEG[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida7SEG_expected_prev);
		$display ("     Real value = %b", saida7SEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida7SEG_exp[20] = saida7SEG_expected_prev[20];
	end
	if (
		( saidaLEDS_expected_prev[0] !== 1'bx ) && ( saidaLEDS_prev[0] !== saidaLEDS_expected_prev[0] )
		&& ((saidaLEDS_expected_prev[0] !== last_saidaLEDS_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaLEDS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaLEDS_expected_prev);
		$display ("     Real value = %b", saidaLEDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaLEDS_exp[0] = saidaLEDS_expected_prev[0];
	end
	if (
		( saidaLEDS_expected_prev[1] !== 1'bx ) && ( saidaLEDS_prev[1] !== saidaLEDS_expected_prev[1] )
		&& ((saidaLEDS_expected_prev[1] !== last_saidaLEDS_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaLEDS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaLEDS_expected_prev);
		$display ("     Real value = %b", saidaLEDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaLEDS_exp[1] = saidaLEDS_expected_prev[1];
	end
	if (
		( saidaLEDS_expected_prev[2] !== 1'bx ) && ( saidaLEDS_prev[2] !== saidaLEDS_expected_prev[2] )
		&& ((saidaLEDS_expected_prev[2] !== last_saidaLEDS_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaLEDS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaLEDS_expected_prev);
		$display ("     Real value = %b", saidaLEDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaLEDS_exp[2] = saidaLEDS_expected_prev[2];
	end
	if (
		( saidaLEDS_expected_prev[3] !== 1'bx ) && ( saidaLEDS_prev[3] !== saidaLEDS_expected_prev[3] )
		&& ((saidaLEDS_expected_prev[3] !== last_saidaLEDS_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaLEDS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaLEDS_expected_prev);
		$display ("     Real value = %b", saidaLEDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaLEDS_exp[3] = saidaLEDS_expected_prev[3];
	end
	if (
		( saidaLEDS_expected_prev[4] !== 1'bx ) && ( saidaLEDS_prev[4] !== saidaLEDS_expected_prev[4] )
		&& ((saidaLEDS_expected_prev[4] !== last_saidaLEDS_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaLEDS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaLEDS_expected_prev);
		$display ("     Real value = %b", saidaLEDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaLEDS_exp[4] = saidaLEDS_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] a;
reg [4:0] b;
reg [3:0] c;
// wires                                               
wire ledNegativo;
wire ledOverflow;
wire ledZero;
wire [20:0] saida7SEG;
wire [4:0] saidaLEDS;

wire sampler;                             

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.ledNegativo(ledNegativo),
	.ledOverflow(ledOverflow),
	.ledZero(ledZero),
	.saida7SEG(saida7SEG),
	.saidaLEDS(saidaLEDS)
);
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #210000 1'b1;
	a[4] = #100000 1'b0;
	a[4] = #130000 1'b1;
	a[4] = #130000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #100000 1'b1;
	a[3] = #100000 1'b0;
	a[3] = #240000 1'b1;
	a[3] = #130000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #100000 1'b1;
	a[2] = #100000 1'b0;
	a[2] = #10000 1'b1;
	a[2] = #100000 1'b0;
	a[2] = #10000 1'b1;
	a[2] = #110000 1'b0;
	a[2] = #10000 1'b1;
	a[2] = #130000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #10000 1'b1;
	a[1] = #80000 1'b0;
	a[1] = #10000 1'b1;
	a[1] = #100000 1'b0;
	a[1] = #240000 1'b1;
	a[1] = #130000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #100000 1'b1;
	a[0] = #100000 1'b0;
	a[0] = #120000 1'b1;
	a[0] = #110000 1'b0;
	a[0] = #10000 1'b1;
	a[0] = #130000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
	b[4] = #10000 1'b1;
	b[4] = #80000 1'b0;
	b[4] = #350000 1'b1;
	b[4] = #130000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #80000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #80000 1'b0;
	b[2] = #120000 1'b1;
	b[2] = #100000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #110000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #80000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #100000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #120000 1'b1;
	b[0] = #110000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #130000 1'b0;
end 
// c[ 3 ]
initial
begin
	c[3] = 1'b1;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b0;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b1;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b0;
end 

ULA_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.sampler_tx(sampler)
);

ULA_vlg_check_tst tb_out(
	.ledNegativo(ledNegativo),
	.ledOverflow(ledOverflow),
	.ledZero(ledZero),
	.saida7SEG(saida7SEG),
	.saidaLEDS(saidaLEDS),
	.sampler_rx(sampler)
);
endmodule

